# -*- coding: utf-8 -*-
"""
Created on Thu Oct 12 17:02:55 2017

@author: zb
"""
# =============================================================================
# 初始化需要求解的系数矩阵，和右端矩阵
# =============================================================================
R=[[31,-13,0,0,0,-10,0,0,0],
   [-13,35,-9,0,-11,0,0,0,0],
   [0,-19,31,-10,0,0,0,0,0],
   [0,0,-10,79,-30,0,0,0,-9],
   [0,0,0,-30,57,-7,0,-5,0],
   [0,0,0,0,-7,47,-30,0,0],
   [0,0,0,0,0,-30,41,0,0],
   [0,0,0,0,-5,0,0,27,-2],
   [0,0,0,-9,0,0,0,-2,29]]
V= [-15,27,-23,0,-20,12,-7,7,10]

# =============================================================================
# 对i行为基准，对每一行的消元操作
# =============================================================================
def elimination(i,matrix,b):
    for n in range(i+1,len(matrix)):
        l = matrix[n][i]/matrix[i][i]
        for m in range(len(matrix[1])):
            matrix[n][m] -= l*matrix[i][m]
            matrix[n][m] = matrix[n][m]
        b[n] -= l*b[i]    
    return matrix,b

# =============================================================================
# 向下消元形成三角矩阵
# =============================================================================
def loop(matrix,b):
    for i in range(len(matrix)-1):
        elimination(i,matrix,b)
    return matrix,b

# =============================================================================
# 对形成的三角矩阵进行求解
# =============================================================================
def result(matrix,b):
    resultMatrix = loop(matrix,b)  
    gussMatrixX = resultMatrix[0]
    gussVectorY = resultMatrix[1]
    resultX = [1]*len(gussVectorY)
    i = len(gussVectorY)-1
    while i > -1:      
        if i == len(gussVectorY)-1:
            resultX[i] = gussVectorY[i]/gussMatrixX[i][i]
        else:
            j = len(gussVectorY)-1
            sumRow = 0
            while j > i:
                sumRow += matrix[i][j]*resultX[j]
                j -=1
            resultX[i] = (gussVectorY[i]-sumRow)/gussMatrixX[i][i]  
        i -= 1
    print(resultX)
    
# =============================================================================
# 输入系数矩阵和和右端向量进行求解
# =============================================================================
result(R,V)